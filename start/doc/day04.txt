# day04

		6. 논리연산자
			=> 두 논리값 사이의 관계를 따지는 연산자
				즉, 논리값을 AND, OR, NOT 방식으로 관계를 알아보는 연산자
				
			주의사항 ]
				데이터는 반드시 논리값이어야 한다.(참 또는 거짓이어야 함)
				
			기호 ]

				& 	AND 관계
				|	OR	관계
			ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
				<절삭 연산자>
				
				&&	AND 관계	- 앞이 거짓이면 무조건 거짓
				||	OR	관계	- 앞이 참이면 뒤는 무조건 참
			ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ				
				!	NOT	관계	- 참이면 거짓, 거짓이면 참(결과를 뒤집는 연산자)
						
				진가표
				
					데이터1		데이터2		OR		AND
					true		true		true	true
					true		false		true	false
					false		true		true	false
					false		false		false	false
					
			컴퓨터는 한번의 질문에 오직 한개만 질문할 수 있다.
			예를 들어 데이터가 10에서 20 사이이냐?
			라는 질문은 할 수 없다.
			그러기 때문에 필요한 것이 논리 연산자이다.
				ex). 데이터가 10에서 20 사이냐? 라는 질문을
				수학 연산식에서는
					10 < 1 < 20
				으로 계산하지만
				컴퓨터에서는
					10 < a && a < 20 (&& : and관계(앞이 거짓이면 무조건 거짓,,,)
				라는 방식으로 질문해야 한다.
					이 질문의 결과는 역시 논리값으로 나온다.
					
				절삭 연산
					=> 특정 부분의 계산식은 계산하지 않도록 한다.(읽어보지도 않는다)
						앞의 질문의 답(참, 거짓)에 따라 뒤의 답도 결정 됨.
					
					&	절삭연산 하지 않음
					&&	절삭 연산 실행
						(앞의 질문이 거짓이면 뒤의 내용도 거짓)
					
					|	절삭 연산 하지 않음.
					||	절삭 연산 실행
						(앞이 참이면 뒤의 내용도 참)
	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ					
					int no1 = 10;
					int no2 = 10;
					
					boolean bool = (no1 > no2) && (no1 == no2);
					
					System.out.println("bool : " + bool);	
					System.out.println("no1 : " + no1);
					System.out.println("no2 : " + no2);
					
					의 결과값과 마지막 변수의 값을 예측하시오.
					
					
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ				
					
				
		7. 비트연산자
					C언어에서 가지고 온 연산자
					C언어는 주소를 직접 이용할 수 있으므로 필요했던 연산자이지만
					자바는 주소를 이용(기억만 함)하지 못하므로 사용 X
					
					& 둘 다 1이면 1 나머지는 0
					| 둘 중 하나가 1이면 1 둘 다 0이면 0
					^ 둘 다 0이거나 1이면 0, 둘 값이 다르면 1 (같으면 0, 다르면 1)
					
					시프트 연산자			
					대상 필드의 값을 비트(2진수)로 바꾼 후 비트 수만큼 값을 이동시킴.
					
					기호 ]
							>>
							<<
							>>> (부호 비트는 움직이지 않음)
							~ 	보수화 연산자(단항연산자)
								각각의 비트의 숫자를 반대로 바꿈
					
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		8. 3항연산자(조건연산자)
				연산자라기 보다는 하나의 명령에 가까운 형식을 가지고 있는 연산자의 한 종류
				조건에 따라서 처리할 내용을 구분해서 처리하도록 하는 연산자
					
	**조건식은 반드시 참 or 거짓으로만 만들어지도록 처리해야 한다.
	
	변수 = (조건식) ?	(조건식이 참일 때 처리내용(반환값1)) : (조건식이 거짓일 때 처리내용(반환값2))
	
	변수에 조건식이 참일 때는 반환값 1을 적용, 거짓일 땐 반환값2를 적용 (if조건(true,false))와 비슷한 듯,,)
	
	**if 명령을 단순화 시킨 의미를 가진 명령
		if(조건식) {
	   	조건식이 참일 경우 실행하는 부분
  		실행 내용
 		  	}
	*모든 연산자가 중첩 처리되듯이
	3항 조건 연산자도 중첩 처리될 수 있다.
	
	(조건식) ? ((조건식2) ? (5) : (6))  : ((조건식3) ? (7) : (8));
	
	조건식 1이 참이고 조건식 2가 참이면 5, 조건식 2가 거짓이면 6을
	조건식 1이 거짓이고 조건식 3 참이면 7을, 거짓이면 8을 실행하세요.
	
		Test 04 참고
					
		
							